name: Test adapter

on:
  workflow_call:
    secrets:
      AZ_CLIENT_ID:
        required: true
      AZ_CLIENT_SECRET:
        required: true
      ADAPTER_CREDENTIALS:
        required: true
      GIT_PRIVATE_TOKEN:
        description: 'github token to install makini vendor'
        required: true
    inputs:
      env-file:
        type: string
        description: '.env file contents'
        required: false
      waiting-app-start:
        type: boolean
        description: 'waiting Nodejs application starts'
        required: false

jobs:
  integration-test:
    runs-on: [self-hosted]
    steps:
      - name: Login to Azure ACR
        uses: docker/login-action@v2
        with:
          registry: 'makini.azurecr.io'
          username: ${{ secrets.AZ_CLIENT_ID }}
          password: ${{ secrets.AZ_CLIENT_SECRET }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker pull dbt image
      - run : docker pull makini.azurecr.io/test-dbt:8d641796af148f103c3619fc6e1cc5bc43f6c11d

      - name: Docker pull tap sync
        run: docker pull makini.azurecr.io/dev-tap-rest-api:0d5dd9c6a7add2cfe8c64d76cb0ca3b781a8480c

      - name: Docker Pull postgres
        run: docker pull postgres

      - name: create a network
        run: docker network create --driver=bridge --subnet=192.168.10.0/24 --gateway=192.168.10.1 adapter-test-net

      - name: Create env file
        run: |
          cat > .env << EOF
            ADAPTER_CREDENTIALS=${{ secrets.ADAPTER_CREDENTIALS }}
            ADAPTER_URL=http://adapter:80
            API_URL=http://test:3000
            MONGO_DSN=mongodb://mongo:27017
            ${{ inputs.env-file }}
          EOF

      - name: View env
        run : cat .env

      - name : Build adapter image
        run: |
          export GIT_PRIVATE_TOKEN=${{ secrets.GIT_PRIVATE_TOKEN }}
          docker build --build-arg GIT_PRIVATE_TOKEN --file ./Dockerfile --tag adapter .

      - name: Launch adapter container
        run: docker run -d --name=adapter --hostname=adapter -p 80:80 --net=adapter-test-net --env-file .env adapter

      - name: show all docker containers
        run: sleep 5 && docker ps

      - name: Waiting app to be ready
        run: |
          for i in {1..60}; do
           timeout 1 curl -I -s localhost:80 | grep HTTP |grep 20 && exit 0 || true;
           sleep 2;
           #
           if [[ "$i" == 30 ]]; then
             echo "Err: Timed out waiting for app to be ready.";
             echo "Last logs seeing in \"adapter\" container: "
             docker logs adapter
             echo "Exit now."; exit 1
           fi
          done

      - name: Write data to json
        run: |
          API_URL="http://adapter/resolve/singer-config"
          OUTPUT_FILE="tap_config.json"

          # Make the API call and get the JSON response
          RESPONSE=$(curl -s "$API_URL")

          # Check if the API call was successful (you might want to add more robust error handling)
          if [ $? -eq 0 ]; then
            # Write the JSON response to the specified file
            echo "$RESPONSE" > "$OUTPUT_FILE"
            echo "Successfully wrote data to $OUTPUT_FILE"
          else
            echo "Error calling API: $API_URL"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Write credential for target postgres
        run: |
          TARGET_POSTGRES_CONFIG=$(cat <<EOF
          {
            "host": "host.docker.internal",
            "port": 5432,
            "database": "inextia_2",
            "user": "postgres",
            "password": "postgres",
            "default_target_schema": "public",
            "batch_size_rows": 1000,
            "use_copy": true,
            "flattening_enabled": true,
            "flattening_max_depth": 3,
            "load_method": "upsert",
            "validate_records": false
          }
          EOF
          )
          echo "$TARGET_POSTGRES_CONFIG" > target_postgres_config.json
          echo "Successfully wrote target postgres configuration to target_postgres_config.json"
         
      - name: Create Postgres username/password and db name
        run: docker run -d \
          --name postgres \
          --hostname=postgres \
          --net=adapter-test-net  \
          -t postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=platform \
          -p 5432:5432 \
          postgres  

      - name: Run Docker Tap Sync
        run: |
          docker network create --attachable adapter-test-net || true # Create network if it doesn't exist
          docker run -d \
            -p 3002:3000 \
            --hostname=tap \
            --name tap-rest \
            --net=adapter-test-net \
            -e NODE_ENV=production \
            makini.azurecr.io/dev-tap-rest-api:0d5dd9c6a7add2cfe8c64d76cb0ca3b781a8480c 

      - name: Start Sync and store data to DB
        run:  docker exec -it tap-rest /bin/bash -c "node dist/tap.js --config tap_config.json | target-postgres --config target_postgres_config.json

      - name: Start aggregate pipeline
        run: |
          docker run -d \
            -v /app/src/dbt_sql:/app/models \
            -w /app \
            --rm \
            --name adapter-test-dbt \
            makini.azurecr.io/test-dbt:8d641796af148f103c3619fc6e1cc5bc43f6c11d

          # Wait briefly to check the container status
          sleep 2

          # Capture the container status
          status=$(docker inspect -f '{{.State.Running}}' adapter-test-dbt 2>/dev/null)

          if [ "$status" != "true" ]; then
            echo '--- Container logs ---'
            docker logs adapter-test-dbt
            exit 1
          else
            echo "âœ… Container is running successfully!"
          fi